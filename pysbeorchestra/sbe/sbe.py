import os
import xml.etree.ElementTree as ET
from typing import Iterator, List, Tuple, Union

import xmlschema

from .sbeinstance import SBEInstance


class SBE10:
    """
    Represents the XML schema for Simple Binary Encoding version 1.0 and processing of XML instances \
    that conform to that schema.
    """
    def __init__(self):
        self.xsd = xmlschema.XMLSchema(SBE10.get_xsd_path())

    @classmethod
    def get_xsd_path(cls):
        schemas_dir = os.path.join(os.path.dirname(__file__), 'schemas/')
        return os.path.join(schemas_dir, 'sbe.xsd')

    def validate(self, xml) -> Iterator[ValueError]:
        """
        Validates an XML data against the XSD schema/component instance. Creates an iterator for the errors generated by the validation of an XML data against
        the XSD schema/component instance.

        :param source: the source of XML data. Can be an :class:`XMLResource` instance, a \
        path to a file or an URI of a resource or an opened file-like object or an Element \
        instance or an ElementTree instance or a string containing the XML data.
        """
        return self.xsd.iter_errors(xml)

    def to_instance(self, xml) -> Tuple[SBEInstance, List[ValueError]]:
        """
        Creates an SBEInstance and a possible List of validation errors.

        :param source: the source of XML data. Can be an :class:`XMLResource` instance, a \
        path to a file or an URI of a resource or an opened file-like object or an Element \
        instance or an ElementTree instance or a string containing the XML data.
        """
        data, errors = [], []
        for result in self.xsd.iter_decode(xml):
            if not isinstance(result, ValueError):
                data.append(SBEInstance(result))
            else:
                errors.append(result)
        return (data, errors)

    def write_instance(self, sbe_instance, stream):
        """
        Encodes an SBEInstance and writes it to a stream.

        :param obj: a data structure in the form returned by :meth:`to_instance`
        :param stream: a file like object
        """
        et = self.xsd.encode(sbe_instance.root(), validation='lax')
        ET.register_namespace('sbe', "http://fixprotocol.io/2016/sbe")
        stream.write(ET.tostring(et[0], encoding='utf8', method='xml'))


SBE = SBE10
""" Default SBE schema implementation """
